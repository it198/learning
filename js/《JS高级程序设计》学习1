第1章 Javascript简介

1、JS的三大组成部分
	.核心语言功能:语法、内置库...，ECMAScript,由ECMA-262定义
	.文档对象模型(DOM): 提供访问和操作网页内容的方法和接口
	.浏览器对象模型(BOM):提供与浏览器交互的方法和接口


第2章 在HTML中使用javascript

1、外部js加载与扩展名无关
	按照惯例，外部Javascript文件带有.js扩展名。但是这个扩展名不是必需的，因为浏览器不会检查包含Javascript的文件的扩展名。这样一来，使用JSP、PHP或者其他服务器端语言生成Javascript代码也就成为了可能。但是，服务器通常还需要看扩展名决定为响应哪种MIME类型。如果不适用.js扩展名，请确保服务器能返回正确的MIME类型。


第3章 基本概念

1、严格模式
	可以放在.js文件顶部，或者函数体上面。
	"use strict";
	function doSomething(){
		"use strict";
		//函数体
	}
	注意:.js文件压缩合并，避免冲突

2、对象初始化为null
	如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为null而不是其他值。这样一来，只要直接检查null值就可以知道相应的变量是否已经保存了一个对象的引用。
	eg:
	if (car != null) {
		//对car对象执行某些操作
	}
	注意： undefined == null ; undefined !== null

3、浮点数比较
	0.1 + 0.2 != 0.3 ,永远不要测试某个特定的浮点数值

4、NaN、isNaN()
	.在ECMAScript中，任何数值除以0会返回NaN;任何涉及NaN的操作(eg:NaN/10)都会返回NaN;这是js于其他编程语言的不同之处
	.NaN是Js中唯一一个不等于自身的特殊数值,因此，可以随时通过检查一个值否等于其自身的方式来测试该值是否是NaN
		eg: 
		var a = NaN;
		a !== a;    //true

		function isReallyNaN(x) {
			return x !== x;
		}

5、数值转换函数 Number()、parseInt()、parseFloat()
	.Number()在转换字符串时比较复杂而且不够合理，因此多用parseInt()、parseFloat()
	.parseInt(),可以传入第二个参数，明确第一个参数是基于XX进制进行解析;多数情况下，我们要解析的都是十进制数值，因此始终将10作为第二个参数是非常需要的。

6、toString()方法
	.数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法
	.调用数值的toString()方法时，可以传入数值的基数。
		eg: var num = 10;
			num.toString(2); //输出二进制值

7、with语句性能
	由于大量使用with语句会导致性能下降，同事也会给调试代码造成困难，因此在开发大型应用程序时，不建议使用with语句

8、函数
	.arguments对象的长度是由传入的参数个数决定的，不是由定义函数时的命名参数的个数决定的。
	.ECMAScript中的所有参数传递的都是值，不肯能通过引用传递参数。
	.ECMAScript函数不能像传统意义上那样实现重装；可以通过检查传入函数中参数的类型和数量并作出不同的反应，模仿方法的重载
	.如果定义了两个名字相同的函数，则后定义的函数会覆盖先定义的函数
	.实际上，未指定返回值的函数返回的是一个特殊的undefined值

第4章 变量、作用域和内存问题
一、数据类型
	1、数据类型分为：
		.基本类型(undefined,null,boolean,number,string):按值访问，可以操作保存在变量中的实际的值;
			基本类型值在内存中占据固定大小的空间，因此被保存在栈内存中
		.引用类型(object):按引用访问，引用类型的值是保存在内存中的对象，保存在堆内存中;操作对象的引用而不是实际的对象

	2、动态的属性
		只能给引用类型值动态地添加属性，以便将来使用
	3、复制变量值
		基本类型值的复制，是创建新的副本，两变量相互独立；
		引用类型值的复制，引用的都是同一个对象。复制的其实是指针，因此两个变量始终都指向同一个对象
	4、参数传递
		ECMAScript中所有的函数的参数都是按值传递的。可以把函数的参数想象成局部变量
二、执行环境及作用域
	1、块级作用域
		.JS没有块级作用域
		.if语句的变量声明会将变量添加到当前的执行环境中；
		.for语句创建的变量i即时在for循环执行结束后，也依旧会存在于循环外部的执行环境中。
		.变量查询也不是没有代价的，访问局部变量要比访问全局变量更快，因为不用向上搜索作用域链。


第5章 引用类型
	引用类型的值(对象)是引用类型的一个实例。引用类型是一种数据结构，用于将数据和功能组织在一起。
一、Object类型
	1、创建对象:推荐使用字面量定义法，代码量少、简洁、封装
		.字面量定义法
			var obj = {};
		.new Object()//构造函数
			var obj = new Object();
	2、属性访问
		.点表示法
			name = obj.name;
		.方括号表示法
			name = obj["name"];
		.方括号的主要优点是可以通过变量来访问属性；属性名包含空格，不能通过点表示法，只能通过方括号访问
			var propertyName = "name";
			var name = obj[propertyName];
		.通常，除非必须使用变量名来访问属性，否则建议使用点表示法
二、Array类型
	1、检测数组
		typeof()、instanceof、Array.isArray()
	2、转换数组
		toString()、toLocaleString()、valueOf()、join()
	3、栈方法
		栈是一种LIFO(Last In First Out,后进先出)的数据结构
		入栈:push()方法可以接受任意数量的参数，把他们逐个添加到数组末尾，并返回修改后的数组长度
		出栈:pop()方法则从数组末尾移除最后一项，减少数组的length值，然后返回移除的项
	4、队列方法
		队列数据结构的访问规则是FIFO(First In First Out,先进先出)
		.方法1
			入对：push()
		 	出对：shift()方法从数组中取得了第一项
		.方法2
			入队:unshift()方法可以接受任意数量的参数，他他们逐个添加到数组头部，并返回修改后的数组长度
			出队:pop()
	5、重新排序方法
		.reverse():反转数组的顺序
		.sort():可带回调函数
		.reverse()和sort()方法的返回值是经过排序之后的数组
	6、操作方法
		.concat()
		.slice()
		.splice()
	7、位置方法
		indexOf()
		lastIndexOf()
	8、迭代方法
		every()
		filter()
		forEach()
		map()
		some()
	9、缩小方法
		reduce()
		reduceRight()

二、Date类型
	new Date();
	Date.now()//返回当前时间戳
	Date.parse()//返回指定时间的时间戳
	1、继承的方法
		.toLocaleString()  //返回本地时间字符串
		.toString() //返回时间字符串
		.valueOf() //返回时间戳
	toLocaleString()和toString()在不同浏览器返回的结果不同，在调试代码时比较有用，在现实日期和时间时没有什么价值；
	valueOf()方法，返回日期的毫秒数，可以用于比较日期值
	2、日期格式化方法
		.toDateString()
		.toTimeString()
		.toLocaleDateString()
		.toLocaleTimeString()
		.toUTCString()
	3、日期/时间组件方法
		.getTime() //与valueOf()方法的返回值相同
		.setTime()
		.getFullYear()
		.setFullYear()
		.getMonth()
		.setMonth()
		.getDate()
		.setDate()
		.getDay()
		.setDay()
		.getHours()
		.setHours()
		.getMinutes()
		.setMinutes()
		.getSeconds()
		.setSeconds()
		.getMilliSeconds()
		.setMilliSeconds()

三、RegExp类型
	创建方法
		var exp = /pattern/flags;
		var exp = new RegExp("pattern","flags");
	flags:
		g:表示全局模式
		i:表示不区分大小写模式
		m:表示多行模式
	1、RegExp实例属性
		.global
		.ignoreCase
		.lastIndex
		.multiline
		.source
	2、RegExp实例方法
		.exec()
		.test()
	3、RegExp构造函数属性
		.input
		.lastMatch
		.lastParen
		.leftContext
		.multiline
		.rightContext
四、Function类型
	函数实际上是对象，每个函数都是Function类型的实例，与其他引用类型一样具有属性和方法。
	函数是对象，因此函数名实际上是一指向函数对象的指针，不会与某个函数绑定。
	函数定义方法：
		方法1:函数声明
		function sum(num1,num2){
			return num1 + num2;
		}
		方法2:函数表达式
		var sum = function(num1,num2){
			return num1 + num2;
		}
		方法3:函数构造方法
		var sum = new Function("num1","num2","return num1 + num2");  //不推荐,但有助于理解“函数是对象，函数名是指针”
	1、没有重载(深入理解)
	2、函数声明与函数表达式
		实际上，解析器在向执行环境中加载数据时，对函数声明和函数表达式并非一视同仁。解析器会率先读取函数声明，并使其在执行任何代码
		之前可用(可用访问)；至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解析执行。
		eg:
		//可行
		alert(sum(10,20));
		function sum(a,b){
			return a + b;
		}
		//报错
		alert(sum(30,40));
		var sum = function(a,b){
			return a + b;
		}
	3、作为值的函数
		函数名本身就是变量，所有函数也可用作为值来使用。
		不仅可以把函数传递给另一个函数，而且可以将一个函数作为另一个函数的结果返回。
	4、函数内部属性
		.arguments
		.this
	5、函数属性和方法
		属性:
			.length 表示函数希望接收的命名参数的个数
			.prototype 保存所有实例方法的真正所在
		方法:apply()、call()
			.这两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内this对象的值。
			.作用相同,区别在于接收参数的方式不同。
			.真正强大的地方时扩充函数赖以运行的作用域
五、基本包装类型
	.特殊的引用类型:Boolean、Number、String
	.引用类型与基本包装类型的主要区别就是对象的生存期。使用new操作符创建的引用类型的实力，在执行流离开之前都一直保存在内存中。
	 而自动创建的基本包装类型的对象，则只存在于一行代码的执行瞬间，然后立即被销毁。这意味着我们不能在运行时为基本类型添加属性和方法。

	1、Boolean类型
		永远不要使用Boolean对象。
		基本类型与引用类型的布尔值的区别如下:
		eg:
			var falseObj = new Boolean(false);
			var result = falseObj && true;
			alert(resutl);  //false

			var falseValue = false;
			var result = falseValue && true;
			alert(resutl);  //true
	2、Number类型
		常用方法
			.toString(num) //num表示显示的数字进制
			.toFixed(null) //num多少位小数位
	3、String类型
		字符方法
			charAt()
			charCodeAt()
		字符串操作方法
			concat()
			slice()
			substr()
			substring()
		字符串位置方法
			indexOf()
			lastIndexOf()
		trim()方法
			trim()
			trimLeft()
			trrimRight()
		字符串大小写转换方法
			toLowerCase()
			toLocaleLowerCase()
			toUpperCase()
			toLocaleUpperCase()
		字符串的模式匹配方法
			match() //与RegExp的exec()方法相同
			search()
			replace()
		localeCompare()方法
六、单体内置对象
	1、Global对象
		所有在全局作用域中定义的属性和方法，都是Global对象的属性
		常用方法
			isNaN()、isFinite()、parseInt()、parseFloat()
		URI方法
			encodeURI()
			decodeURI()
			encodeURIComponent()
			decodeURIComponent()
		eval()方法
			在eval()中创建的任何变量或函数都不会被提升，因为在解析代码的时候，它们被包含在一个字符串中;只在eval()执行的时候创建；
			eval()解析字符串的能力非常强大，但也非常危险，使用时必须谨慎！
		Global对象的属性
			undefined、NaN、Infinity、Object、Array、Function、Boolean、String、Number
			Date、RegExp、Error......
		window对象
			Javascript中的window对象除了扮演ECMAScript规定的Global对象角色外，还承担了很多别的任务

	2、Math对象
		Math对象的属性
			Math.E  Math.PI ...
		Math对象的方法
			求最小或最大值
				Math.min()
				Math.max()
				eg:
					var values = [1,2,3,4,5,6,7,8];
					var max = Math.max.apply(Math,values);
			舍入方法
				Math.ceil() 向上舍入
				Math.floor() 向下舍入
				Math.round() 标准舍入
			random()方法
				random()方法返回介于0与1之间一个随机数，不包括0和1。
				求某个整数范围内随机一个值
				值 = Math.floor(Math.random() * 可能值的总数 + 第一个不可能的值)
				eg:
					function selectRandom(lowerValue,upperValue){  //lowerValue到upperValue之间，包括lowerValue和upperValue
						var choices = upperValue - lowerValue + 1;
						return Math.floor(Math.random() * choices + lowerValue);
					}
			其他方法
				Math.abs()
				Math.exp()
				......


第6章 面向对象的程序设计
	ECMAScript对象可以理解为散列表:无非就是一组名值对，其中值可以是数据或函数

一、理解对象
	对象属性类型：数据属性、访问属性
	Object.defineProperty()
	Object.defineProperties()

二、创建对象
	常用创建方法：Object构造函数、对象字面量；缺点：使用同一个接口创建很多对象，会产生大量的重复代码

	1、工厂模式
		用函数封装以特定接口创建对象的细节。
		eg:
		function createPerson(name,age,job){
			var o = new Object();
			o.name = name;
			o.age = age;
			o.job = job;
			o.sayName = function(){
				console.log(this.name);
			}
			return o;
		}
		var p1 = createPerson("AA",28,"teacher");
		var p2 = createPerson("BB",29,"doctor");
	工厂模式解决了多个相似对象的问题，却没有解决对象识别的问题(即怎样知道一个对象的类型)。

	2、构造函数模式
		特点:
			.没有显示地创建对象
			.直接将属性和方法赋给了this对象
			.没有return语句
			.方法名首字母大写
		优点:
			.创建自定义的构造函数意味着将来可以将它的实例标识为一种特定的类型；这正是构造函数模式胜过工厂模式的地方
		缺点:
			使用构造函数的主要问题是每个方法都要在每个实例上重新创建一遍

		eg:
		function Person(name,age,job){
			this.name = name;
			this.age = age;
			this.job = job;
			this.sayName = function(){
				console.log(this.name);
			}
		}
		var p1 = new Person("AA",28,"teacher");
		var p2 = new Person("BB",29,"doctor");

		调用
			//当做构造函数使用
			var person = new Person("Nicholas",29,"Software Enginner");
			person.sayName();

			//作为普通函数调用
			Person("Greg",27,"Doctor"); //添加到window
			window.sayName();

			//在另一个对象的作用域中调用
			var o = new Object();
			Person.call(o,"Kristen",25,"Nurse");
			o.sayName();

	3、原型模式
		缺点:原型模式的最大问题是由其共享的本性所导致的。
		eg:
		function Person(){

		}
		Person.prototype = {
			constructor:Person,
			name:"Hansome",
			age:28,
			sayName:function(){
				console.log(this.name);
			}

		}
		var p1 = new Person();
		var p2 = new Person();
	4、组合使用构造函数模式和原型模式(默认推荐使用)
		特点：
			构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。

		eg:
		function Person(name,age,job){
			this.name = name;
			this.age = age;
			this.job = job;
			this.friends = ["Shelby","Court"];
		}
		Person.prototype = {
			constructor:Person,
			sayName:function(){
				console.log(this.name);
			}
		}
		var p1 = new Person("Nicholas",29,"Software Engineer");
		var p2 = new Person("Greg",27,"Doctor");
		p2.friends.push("Van");

	5、动态原型模式
		通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型。

		eg:
		function Person(name,age,job){
			//属性
			this.name = name;
			this.age = age;
			this.job = job;

			//方法
			if(typeof this.sayName != "function"){
				Person.prototype.sayName = function(){
					console.log(this.name);
				}
			}
		}

	6、寄生构造函数模式
		该模式的基本思想：创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后再返回新创建的对象
		eg:
		function Person(name,age,job){
			var o = new Object();
			o.name = name;
			o.age = age;
			o.job = job;
			o.sayName = function(){
				console.log(this.name);
			}
			return o;
		}	
		var p1 = new Person("Nicholas", 29, "Software Enginner");
		p1.sayName();	

	7、稳妥构造函数模式
		稳妥对象，指的是没有公共属性，而且其他方法也不引用this的对象。稳妥对象最适合在一些安全的环境中(这些环境中禁止使用this和new)

		eg
		function Person(name,age,job){
			//创建要返回的对象
			var o = new Object();

			//可以在这里定义私有变量和函数

			//添加方法
			o.sayName = function(){
				console.log(name);
			}

			//返回对象
			return o;
		}

		var p = Person("Nicholas",29,"Software Engineer");
		p.sayName();

三、继承
	ECMAScript只支持实现继承，而且实现继承主要是依靠原型链来是实现的

	1、原型链
		ECMASCript实现继承的主要方法是通过“原型链”。
		基本思想:
			利用原型让一个引用类型继承另一个引用类型的属性和方法。
		原型链的问题:
			.包含引用类型值的原型
			.在创建子类型的实例时，不能向超类型的构造函数中传递参数
	2、借用构造函数
		传递参数：在子类中利用call()/apply()调用父类，然后传递参数
	3、组合继承(也叫伪经典继承)
		将原型链和借用构造函数的技术组合在一块
		最常用的继承模式，而且instanceof和isPrototypeOf()也能够用于识别基于组合继承创建的对象
		eg:
		function SuperType(name){
			this.name = name;
			this.colors = ["red","blue","green"];
		}
		SuperType.prototype.sayName = function(){
			console.log(this.name);
		}
		function SubType(name,age){
			//继承属性
			SuperType.call(this,name);
			this.age = age;
		}
		//继承方法
		SubType.prototype = new SuperType();
		SubType.prototype.sayAge = function(){
			console.log(this.age);
		}
	4、原型式继承

		eg:
			function object(o){
				function F(){}
				F.prototype = o;
				return new F();
			}
		在object()函数内部，创建一个临时性的构造函数，然后传入的对象作为这个构造函数的原型，最后返回了这个临时类型的一个新势力。
	5、寄生式继承
		寄生式继承的思路与寄生构造函数和工厂模式类似，创建一个仅用于封装继承过程的函数。
		eg:
		function createAnother(original){
			var clone = object(original); //通过调用函数创建一个新对象
			clone.sayHi = function(){
				console.log("hi"); //以某种方式来增强这个对象
			}
			return clone; //返回这个对象
		}
	6、寄生组合式继承















































